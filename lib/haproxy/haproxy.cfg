# version 3

global
		tune.ssl.default-dh-param 1024
		# https://github.com/haproxytech/haproxy-lua-cors
		lua-load /usr/local/etc/haproxy/cors.lua
		# https://www.haproxy.com/blog/introduction-to-haproxy-logging/
		log stdout format raw daemon "${LOGLEVEL}"
		log stderr format raw daemon "${LOGLEVEL}"
		ssl-default-bind-options ssl-min-ver TLSv1.3

defaults
		default-server init-addr last,libc,none
		default-server inter 3s rise 2 fall 3
		log global
		mode http
		option contstats
		option dontlognull
		option forwardfor
		option httplog
		timeout client 63s
		timeout connect 5s
		timeout http-keep-alive 1s
		timeout http-request 63s
		timeout server 63s
		# https://www.haproxy.com/blog/websockets-load-balancing-with-haproxy/
		timeout tunnel 3600s

resolvers docker-bridge-resolver
		nameserver docker-resolver 127.0.0.11:53
		hold valid 0ms

http-errors jf-http-errors
		errorfile 400 /etc/haproxy/errors/400.http
		errorfile 401 /etc/haproxy/errors/401.http
		errorfile 403 /etc/haproxy/errors/403.http
		errorfile 404 /etc/haproxy/errors/404.http
		errorfile 500 /etc/haproxy/errors/500.http
		errorfile 502 /etc/haproxy/errors/502.http
		errorfile 503 /etc/haproxy/errors/503.http

userlist balena
		user balena insecure-password "${BALENA_DEVICE_UUID}"

frontend http
		bind :::80 v4v6
		errorfiles jf-http-errors
		http-request capture req.hdr(Host) len 15
		http-response lua.cors
		# https://www.haproxy.com/blog/haproxy-log-customization/
		log-format "%ci:%cp [%tr] %ft %b/%s %TR/%Tw/%Tc/%Tr/%Ta %ST %B %CC %CS %tsc %ac/%fc/%bc/%sc/%rc %sq/%bq %hr %hs %{+Q}r"

		acl api_dead nbsrv(api-backend) lt 1
		monitor-uri /health
		monitor fail if api_dead

		default_backend api-backend

		acl host-api-backend hdr_sub(host) -i "api."
		use_backend api-backend if host-api-backend

frontend https
		bind :::443 v4v6 ssl crt "${CERT_CHAIN_PATH}" alpn h2,http/1.1
		default_backend api-backend
		errorfiles jf-http-errors
		http-request add-header X-Forwarded-Proto https
		http-request add-header X-Forwarded-Port 443
		http-request capture req.hdr(Host) len 15
		http-response lua.cors
		log-format "%ci:%cp [%tr] %ft %b/%s %TR/%Tw/%Tc/%Tr/%Ta %ST %B %CC %CS %tsc %ac/%fc/%bc/%sc/%rc %sq/%bq %hr %hs %{+Q}r"


		acl host-api-backend hdr_sub(host) -i "api."
		use_backend api-backend if host-api-backend


backend api-backend
		server api api:80 resolvers docker-bridge-resolver resolve-prefer ipv4 check port 80
